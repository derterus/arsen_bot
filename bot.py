import telebot
from telebot import types
import sqlite3
import threading
import time
from datetime import datetime, timedelta
import logging
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002842558712"))
ADMIN_ID = int(os.getenv("ADMIN_ID", "5161127199"))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
cursor = conn.cursor()
db_lock = threading.Lock()

# –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subscriptions
def init_db():
    with db_lock:
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY,
            expire_time INTEGER,
            payment_id TEXT
        )
        ''')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü notification_sent
        cursor.execute("PRAGMA table_info(subscriptions)")
        columns = [info[1] for info in cursor.fetchall()]
        if 'notification_sent' not in columns:
            cursor.execute('ALTER TABLE subscriptions ADD COLUMN notification_sent INTEGER DEFAULT 0')
        conn.commit()

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PRICE_MONTH_STARS = 100
CURRENCY = "XTR"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_or_update_subscription(user_id, expire_time, payment_id=None, notification_sent=0):
    with db_lock:
        cursor.execute('''
        INSERT INTO subscriptions (user_id, expire_time, payment_id, notification_sent)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET 
            expire_time=excluded.expire_time, 
            payment_id=excluded.payment_id,
            notification_sent=excluded.notification_sent
        ''', (user_id, expire_time, payment_id, notification_sent))
        conn.commit()

def get_subscription(user_id):
    with db_lock:
        cursor.execute('SELECT expire_time, payment_id, notification_sent FROM subscriptions WHERE user_id=?', (user_id,))
        return cursor.fetchone()

def remove_subscription(user_id):
    with db_lock:
        cursor.execute('DELETE FROM subscriptions WHERE user_id=?', (user_id,))
        conn.commit()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
def notify_admin_refunded(user_id, payment_id, chat_id):
    try:
        bot.send_message(
            ADMIN_ID,
            f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç:\nUser ID: {user_id}\nChat ID: {chat_id}\nPayment ID: {payment_id or '–ù–µ—Ç'}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç –≤—Ä—É—á–Ω—É—é."
        )
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_keyboard(user_has_sub=False, user_in_group=True):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    if user_has_sub:
        kb.row(types.KeyboardButton('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏'), types.KeyboardButton('–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'))
        kb.row(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'))
        if not user_in_group:
            kb.row(types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞'))
    else:
        kb.row(types.KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'))
    return kb

def make_payment_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", pay=True))
    return kb

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
@bot.pre_checkout_query_handler(func=lambda query: True)
def pre_checkout_query(pre_checkout_query):
    try:
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ pre_checkout_query: {e}")
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message=str(e))

@bot.message_handler(commands=['addsub'])
def add_subscription_admin(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    now = datetime.now()
    expire = now + timedelta(days=30)
    add_or_update_subscription(ADMIN_ID, int(expire.timestamp()), payment_id="admin_manual_add", notification_sent=0)
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ {expire.strftime('%d-%m-%Y %H:%M:%S')}")

@bot.message_handler(func=lambda m: m.text == '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞')
def send_invite_link(message):
    user_id = message.from_user.id
    sub = get_subscription(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –µ—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    if not sub or datetime.fromtimestamp(sub[0]) < datetime.now():
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status not in ['left', 'kicked']:
            bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ. –°—Å—ã–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞.")
            return

        # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (24 —á–∞—Å–∞)
        expire_time = int((datetime.now() + timedelta(hours=24)).timestamp())
        invite_link = bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,
            expire_date=expire_time,
            creates_join_request=False
        )

        bot.send_message(message.chat.id,
                         f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞, –æ–¥–∏–Ω —Ä–∞–∑):\n{invite_link.invite_link}")

    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


@bot.message_handler(commands=['start'])
def start(message):
    sub = get_subscription(message.from_user.id)
    user_in_group = False
    if sub:
        try:
            member = bot.get_chat_member(CHANNEL_ID, message.from_user.id)
            user_in_group = member.status not in ['left', 'kicked']
        except Exception:
            user_in_group = False
    kb = make_keyboard(user_has_sub=bool(sub), user_in_group=user_in_group)
    if sub:
        if user_in_group:
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=kb)
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤ –≥—Ä—É–ø–ø–µ. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ.", reply_markup=kb)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=kb)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /viewdb
@bot.message_handler(commands=['viewdb'])
def view_db(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    try:
        with db_lock:
            subs = cursor.execute('SELECT user_id, expire_time, payment_id, notification_sent FROM subscriptions').fetchall()
        if not subs:
            bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
            return
        response = "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
        for user_id, expire_time, payment_id, notification_sent in subs:
            expire_date = datetime.fromtimestamp(expire_time).strftime('%d-%m-%Y %H:%M:%S')
            response += f"User ID: {user_id}\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expire_date}\nPayment ID: {payment_id or '–ù–µ—Ç'}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_sent}\n\n"
            if len(response) > 3500:  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
                bot.send_message(message.chat.id, response)
                response = ""
        if response:
            bot.send_message(message.chat.id, response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /refund
@bot.message_handler(commands=['refund'])
def refund(message):
    sub = get_subscription(message.from_user.id)
    if not sub or not sub[1]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–µ.")
        return
    try:
        notify_admin_refunded(message.from_user.id, sub[1], message.chat.id)
        try:
            bot.ban_chat_member(CHANNEL_ID, message.from_user.id)
            bot.unban_chat_member(CHANNEL_ID, message.from_user.id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
        remove_subscription(message.from_user.id)
        kb = make_keyboard(user_has_sub=False)
        bot.send_message(
            message.chat.id,
            "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=kb
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@bot.message_handler(func=lambda m: m.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
def buy_subscription(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        member = bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if member.status in ['member', 'administrator', 'creator', 'restricted']:
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
            return
        prices = [types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π', amount=PRICE_MONTH_STARS)]
        bot.send_invoice(
            chat_id=message.chat.id,
            title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –Ω–∞ 30 –¥–Ω–µ–π",
            invoice_payload="subscribe_month",
            provider_token="",  # Telegram Stars –Ω–µ —Ç—Ä–µ–±—É–µ—Ç provider_token
            currency=CURRENCY,
            prices=prices,
            start_parameter="subscribe-month",
            reply_markup=make_payment_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@bot.message_handler(func=lambda m: m.text == '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
def extend_subscription(message):
    sub = get_subscription(message.from_user.id)
    if not sub:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    prices = [types.LabeledPrice(label='–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π', amount=PRICE_MONTH_STARS)]
    try:
        bot.send_invoice(
            chat_id=message.chat.id,
            title="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            description="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –Ω–∞ 30 –¥–Ω–µ–π",
            invoice_payload="extend_month",
            provider_token="",
            currency=CURRENCY,
            prices=prices,
            start_parameter="extend-month",
            reply_markup=make_payment_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@bot.message_handler(func=lambda m: m.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
def cancel_subscription(message):
    sub = get_subscription(message.from_user.id)
    if not sub:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        return
    try:
        try:
            bot.ban_chat_member(CHANNEL_ID, message.from_user.id)
            bot.unban_chat_member(CHANNEL_ID, message.from_user.id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
        remove_subscription(message.from_user.id)
        kb = make_keyboard(user_has_sub=False)
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.", reply_markup=kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"
@bot.message_handler(func=lambda m: m.text == '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏')
def status_subscription(message):
    sub = get_subscription(message.from_user.id)
    if not sub:
        kb = make_keyboard(user_has_sub=False)
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=kb)
        return
    expire_time = datetime.fromtimestamp(sub[0])
    remaining = expire_time - datetime.now()
    if remaining.total_seconds() <= 0:
        kb = make_keyboard(user_has_sub=False)
        bot.send_message(message.chat.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.", reply_markup=kb)
        return
    days = remaining.days
    hours, remainder = divmod(remaining.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    kb = make_keyboard(user_has_sub=True)
    bot.send_message(
        message.chat.id,
        f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â—ë: {days} –¥–Ω {hours} —á {minutes} –º–∏–Ω.",
        reply_markup=kb
    )


@bot.chat_member_handler()
def handle_new_member(update):
    user = update.new_chat_member.user
    status = update.new_chat_member.status
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è (—Å—Ç–∞—Ç—É—Å —Å—Ç–∞–ª member –∏–ª–∏ restricted)
    if status in ['member', 'restricted']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ
        with db_lock:
            sub = cursor.execute('SELECT expire_time FROM subscriptions WHERE user_id = ?', (user_id,)).fetchone()

        if not sub:
            # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –±–∞–Ω–∏–º
            try:
                bot.ban_chat_member(CHANNEL_ID, user_id)
                bot.unban_chat_member(CHANNEL_ID, user_id)  # –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ —Å—Å—ã–ª–∫–∏
                bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        else:
            expire_time = datetime.fromtimestamp(sub[0])
            if expire_time < datetime.now():
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî —Ç–æ–∂–µ –±–∞–Ω–∏–º
                try:
                    bot.ban_chat_member(CHANNEL_ID, user_id)
                    bot.unban_chat_member(CHANNEL_ID, user_id)
                    bot.send_message(user_id, "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.")
                    with db_lock:
                        cursor.execute('DELETE FROM subscriptions WHERE user_id = ?', (user_id,))
                        conn.commit()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π {user_id}: {e}")
                    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    try:
        payload = message.successful_payment.invoice_payload
        user_id = message.from_user.id
        payment_id = message.successful_payment.telegram_payment_charge_id
        now = datetime.now()
        sub = get_subscription(user_id)
        new_expire = now + timedelta(days=30) if not sub or datetime.fromtimestamp(sub[0]) < now else datetime.fromtimestamp(sub[0]) + timedelta(days=30)
        add_or_update_subscription(user_id, int(new_expire.timestamp()), payment_id, notification_sent=0)
        kb = make_keyboard(user_has_sub=True)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {new_expire.strftime('%d-%m-%Y %H:%M:%S')}",
            reply_markup=kb
        )
        try:
            member = bot.get_chat_member(CHANNEL_ID, user_id)
            if member.status in ['left', 'kicked']:
                invite_link = bot.create_chat_invite_link(CHANNEL_ID, member_limit=1)
                bot.send_message(user_id, f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª—É: {invite_link.invite_link}")
            else:
                bot.send_message(user_id, "–í—ã —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ. –î–æ—Å—Ç—É–ø –ø—Ä–æ–¥–ª—ë–Ω!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª: {e}")
            invite_link = bot.create_chat_invite_link(CHANNEL_ID, member_limit=1)
            bot.send_message(user_id, f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª—É: {invite_link.invite_link}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {user_id}: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

# –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
def subscription_watcher():
    while True:
        now_ts = int(datetime.now().timestamp())
        with db_lock:
            subs = cursor.execute('SELECT user_id, expire_time, notification_sent FROM subscriptions').fetchall()
        expired_count = 0
        for user_id, expire_time, notification_sent in subs:
            remain = expire_time - now_ts
            if remain <= 0:
                try:
                    member = bot.get_chat_member(CHANNEL_ID, user_id)
                    if member.status not in ['left', 'kicked']:
                        bot.send_message(user_id, "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                        bot.ban_chat_member(CHANNEL_ID, user_id)
                        bot.unban_chat_member(CHANNEL_ID, user_id)
                        expired_count += 1
                    remove_subscription(user_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            elif 0 < remain <= 24 * 3600 and not notification_sent:
                try:
                    bot.send_message(
                        user_id,
                        "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏! –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."
                    )
                    add_or_update_subscription(user_id, expire_time, None, notification_sent=1)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subs)}, —É–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö: {expired_count}")
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
threading.Thread(target=subscription_watcher, daemon=True).start()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        bot.delete_webhook(drop_pending_updates=True)
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
        time.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        bot.delete_webhook(drop_pending_updates=True)
        bot.polling(none_stop=True)